// This file contains material supporting section 3.7 of the textbook:
// "Object Oriented Software Engineering" and is issued under the open-source
// license found at www.lloseng.com 

package client;

import ocsf.client.*;
import common.*;
import java.io.*;

/**
 * This class overrides some of the methods defined in the abstract
 * superclass in order to give more functionality to the client.
 *
 * @author Dr Timothy C. Lethbridge
 * @author Dr Robert Lagani&egrave;
 * @author Fran&ccedil;ois B&eacute;langer
 * @version July 2000
 */
public class ChatClient extends AbstractClient
{
  //Instance variables **********************************************
  
  /**
   * The interface type variable.  It allows the implementation of 
   * the display method in the client.
   */
  ChatIF clientUI; 

  
  //Constructors ****************************************************
  
  /**
   * Constructs an instance of the chat client.
   *
   * @param host The server to connect to.
   * @param port The port number to connect on.
   * @param clientUI The interface type variable.
   */
  
  public ChatClient(String host, int port, ChatIF clientUI) 
    throws IOException 
  {
    super(host, port); //Call the superclass constructor
    this.clientUI = clientUI;
    openConnection();
  }

  
  //Instance methods ************************************************
    
  /**
   * This method handles all data that comes in from the server.
   *
   * @param msg The message from the server.
   */
  public void handleMessageFromServer(Object msg) 
  {
    clientUI.display(msg.toString());
  }

  /**
   * This method handles all data coming from the UI            
   *
   * @param message The message from the UI.    
   */
  public void handleMessageFromClientUI(String message)
  {
	//Commandsubstring will be used to check if the user has input a command to sethost or setport
	//portOrHost substring will be used to set host or port if the user has input command to do so
	  String commandSubstring ="";
	  String portOrHost = "";
	  
	  if(message.length()>9) {
		  commandSubstring = message.substring(0,7);
		  portOrHost = message.substring(9,message.length()-1);
	  }
	  
	if(message == "#quit") {
		//need to make sure the server is terminated before exiting the program
		quit();
	}
	else if(message == "#logoff") {
		try {
			closeConnection();
		} catch (IOException e) {
			//This seems wrong i should fix this
			clientUI.display("Error logging out");
		}
		
	}
	else if(commandSubstring == "#setport") {
		
		if(!isConnected()) {
			setPort(Integer.parseInt(portOrHost));
		}
		else {
			clientUI.display("Please logoff before setting port");
		}
	}
	else if(commandSubstring == "#sethost") {
		if(!isConnected()) {
			setHost(portOrHost);
		}
		else {
			clientUI.display("Please logoff before setting host");
		}
	}
	else if(message == "#gethost") {
		clientUI.display("HOST: "+getHost());
	}
	else if(message == "#getport") {
		clientUI.display("PORT: "+getPort());
	}
	
	else {
		try
	    {
	      sendToServer(message);
	    }
	    catch(IOException e)
	    {
	      clientUI.display
	        ("Could not send message to server.  Terminating client.");
	      quit();
	    }
		
	}
	
  }
  
  public void connectionException(Exception exception) {
	  
	  
	}
  

	/**
	 * Overridden method from superclass AbstractClient
	 * When server closes connection, function prints that the server has
	 * closed and the program is quitting
	 * Program then quits
	 */
  
  public void connectionClosed() {
	  
	  System.out.println("Server has shutdown. Quiting.\n");
	  quit();
	  
	}

  
  /**
   * This method terminates the client.
   */
  public void quit()
  {
    try
    {
      closeConnection();
    }
    catch(IOException e) {}
    System.exit(0);
  }
}
//End of ChatClient class
